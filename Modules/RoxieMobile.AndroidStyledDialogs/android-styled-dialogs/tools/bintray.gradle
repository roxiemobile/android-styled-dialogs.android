apply plugin: 'com.jfrog.bintray'

version = mVersionName

// Android libraries
if (project.hasProperty('android')) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
}
// Java libraries
else {
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
//  archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty('bintray.user') ? properties.getProperty('bintray.user') : System.getenv('BINTRAY_USER')
    key  = properties.getProperty('bintray.api_key') ? properties.getProperty('bintray.api_key') : System.getenv('BINTRAY_API_KEY')

    publish = true
    configurations = ['archives']

    pkg {
        repo = mBintrayRepo
        name = mBintrayName

        desc = mPackageDesc

        websiteUrl = mCompanyUrl
        issueTrackerUrl = mIssuesUrl
        vcsUrl = mGitRepoUrl

        licenses = mAllLicenses
        publicDownloadNumbers = true

        //noinspection GroovyAssignabilityCheck
        version {
            // Version-specific description
            desc = mPackageDesc

            // Configuration for GPG signing
            gpg {
                // Determines whether to GPG sign the files
                sign = true
                // The passphrase for GPG signing
                passphrase = properties.getProperty('bintray.gpg.password') ? properties.getProperty('bintray.gpg.password') : System.getenv('BINTRAY_GPG_PASSWORD')
            }
        }
    }
}
